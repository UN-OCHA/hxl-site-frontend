@function type-scale($level) {
  @return map-get($type-scale, $level);
}

@function line-height($level) {
  @return map-get($line-height, $level);
}

@function typescale($power-of, $base: $system__font-size, $scale: $system__typescale) {
  @if $power-of == 0{
    @return 1rem;
  }@else{
    $size : $base * power($scale, $power-of);
    @return rem($size);
  }
}


/// A function to keep all measurements and spacing aligned to the system's standard unit of measurement
/// @example
/// 	$system--unit : 16px;
///   @include system-unit(2);
///   /* 32px */
@function system-unit($number: 1){
  @return $number * $system__unit;
}

/// Converts pixels to rems
/// @param {Number} $pixels
/// @param {Number} $root the root pixel value
/// @return {Number} a rem measurement
/// @example
///   $system--font-size : 16px;
///   rem(16px) /* returns 1rem */
///
@function rem($pixels, $root: $system__font-size){
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if (unitless($root)) {
    $root: $root * 1px;
  }
  @return ($pixels / $root) * 1rem;
}

/// Exponentation. Helpful with modular scale typography
/// @param {Number} $base
/// @param {Number} $exponent
/// @example
///   pow(2,3) returns 8
///
@function power ($base, $exponent){
  $number: 1;
  @if $exponent >= 0 {
    @for $i from 1 through $exponent{
      $number: $number * $base;
    }
  }@else{
    @for $i from $exponent to 0 {
      $number: $number / $base;
    }
  }
  @return $number;
}